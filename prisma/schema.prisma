generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String
  email          String           @unique
  hashedPassword String?
  session       Session[]
  projects       ProjectMembers[]
  task           Task[]
  resources      Resource[]
  comment        Comment[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Project {
  id          String           @id @default(cuid())
  name        String
  description String
  created_at  DateTime         @default(now())
  members     ProjectMembers[]
  tasks       Task[]
  resources   Resource[]
  comments    Comment[]
}

model ProjectMembers {
  id         String  @id @default(cuid())
  project_id String
  user_id    String
  project    Project @relation(fields: [project_id], references: [id], onUpdate: Cascade)
  user       User    @relation(fields: [user_id], references: [id], onUpdate: Cascade)
  role       Role    @default(MEMBER)
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String
  status      Status    @default(TO_DO)
  priority    Priority?
  due_date    DateTime
  project_id  String
  project     Project   @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id     String
  asignee     User      @relation(fields: [user_id], references: [id], onUpdate: Cascade)
}

model Resource {
  id          String   @id @default(cuid())
  file_name   String
  file_url    String
  created_at  DateTime @default(now())
  project_id  String
  project     Project  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id     String
  uploaded_by User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Comment {
  id         String   @id @default(cuid())
  comment    String
  created_at DateTime @default(now())
  user_id    String
  project_id String
  author_id  User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project    Project  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Role {
  ADMIN
  MEMBER
  LECTURER
}

enum Status {
  TO_DO
  IN_PROGRESS
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
